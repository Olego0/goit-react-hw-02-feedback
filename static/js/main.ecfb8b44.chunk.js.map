{"version":3,"sources":["components/Section/Section.module.css","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","this","props","title","children","className","styles","React","Component","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","wrapper","FeedbackOptions","onLeaveFeedback","options","map","el","key","v4","onClick","name","button","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","target","setState","prevState","prevProps","step","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,QAAU,8B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,kC,iBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,uNCEtBC,E,uKAOM,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACf,OACE,6BACE,wBAAIC,UAAWC,IAAOH,OAAQA,GAC7BC,O,GAZaG,IAAMC,WAAtBR,EACGS,aAAe,CACpBN,MAAO,IAeIH,Q,iBCIAU,E,uKAbH,IAAD,EACmDT,KAAKC,MAAvDS,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAAKC,EADrB,EACqBA,MAAOC,EAD5B,EAC4BA,mBACnC,OACE,yBAAKV,UAAWC,IAAOU,SACrB,oCAAUL,GACV,uCAAaC,GACb,mCAASC,EAAT,KACA,qCAAWC,GACX,mDAAyBC,EAAzB,U,GAhBiBR,IAAMC,W,yBCwBhBS,E,uKAnBH,IAAD,EAC6BhB,KAAKC,MAAjCgB,EADD,EACCA,gBAAgBC,EADjB,EACiBA,QACxB,OACE,6BACGA,EAAQC,KAAI,SAAAC,GAAE,OACb,4BACAC,IAAKC,eACLC,QAASN,EACTO,KAAMJ,EACNhB,UAAWC,IAAOoB,QAEjBL,W,GAfmBd,IAAMC,W,iBCYrBmB,E,uKATH,IACAC,EAAY3B,KAAKC,MAAjB0B,QACR,OACE,6BACE,wBAAIvB,UAAWC,IAAOsB,SAAtB,IAAiCA,EAAjC,U,GARmBrB,IAAMC,WCI3BW,EAAU,CAAC,OAAQ,UAAW,OA4DrBU,E,4MA1DbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAOPkB,mBAAqB,WACnB,OAAO,EAAKD,MAAMnB,KAAO,EAAKmB,MAAMjB,IAAM,EAAKiB,MAAMlB,S,EAGvDoB,gCAAkC,WAChC,OAAkC,IAA9B,EAAKD,qBACA,EAEAE,KAAKC,MAAO,EAAKJ,MAAMnB,KAAO,EAAKoB,qBAAwB,M,EAItEb,gBAAkB,YAAiB,IAC3BO,EAD0B,EAAbU,OACbV,KACN,EAAKW,UAAS,SAACC,EAAWC,GACxB,OAAO,eACJb,EAAOY,EAAUZ,GAAQa,EAAUC,U,uDAMxC,OACE,6BACE,kBAAC,EAAD,CAASpC,MAAM,yBACb,kBAAC,EAAD,CACEgB,QAASA,EACTD,gBAAiBjB,KAAKiB,mBAGK,IAA9BjB,KAAK8B,qBACJ,kBAAC,EAAD,CAAcH,QAAQ,sBAEtB,kBAAC,EAAD,CAASzB,MAAM,cACb,kBAAC,EAAD,CACEQ,KAAMV,KAAK6B,MAAMnB,KACjBE,IAAKZ,KAAK6B,MAAMjB,IAChBD,QAASX,KAAK6B,MAAMlB,QACpBE,MAAOb,KAAK8B,qBACZhB,mBAAoBd,KAAK+B,0C,GAlDrBzB,IAAMC,WCIJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,KAAM,KAEbS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.ecfb8b44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__3s6tK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Statistics_wrapper__SplX6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1pobc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__ddPhK\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Section.module.css\";\nclass Section extends React.Component {\n  static defaultProps = {\n    title: \"\",\n  };\n  static propTypes = {\n    title: PropTypes.string,\n  };\n  render() {\n    const { title, children } = this.props;\n    return (\n      <div>\n        <h2 className={styles.title}>{title}</h2>\n        {children}\n      </div>\n    );\n  }\n}\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Statistics.module.css\";\nclass Statistics extends React.Component {\n  static propTypes = {\n    good: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n  };\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n    return (\n      <div className={styles.wrapper}>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad} </p>\n        <p>Total: {total}</p>\n        <p>Positive percentage: {positivePercentage}%</p>\n      </div>\n    );\n  }\n}\nexport default Statistics;\n","import React from \"react\";\nimport styles from \"./FeedbackOptions.module.css\";\nimport PropTypes from \"prop-types\";\nimport {v4} from 'uuid';\nclass FeedbackOptions extends React.Component {\n  static propTypes = {\n    onLeaveFeedback: PropTypes.func.isRequired,\n  };\n  render() {\n    const { onLeaveFeedback,options } = this.props;\n    return (\n      <div>\n        {options.map(el => (\n          <button\n          key={v4()}\n          onClick={onLeaveFeedback}\n          name={el}\n          className={styles.button}\n        >\n          {el}\n        </button>\n        ))}\n    \n      </div>\n    );\n  }\n}\nexport default FeedbackOptions;\n","import React from \"react\";\nimport styles from \"./Notification.module.css\";\nimport PropTypes from \"prop-types\";\nclass Notification extends React.Component {\n  static propTypes = {\n    message: PropTypes.string.isRequired,\n  };\n  render() {\n    const { message } = this.props;\n    return (\n      <div>\n        <h2 className={styles.message}> {message} </h2>\n      </div>\n    );\n  }\n}\nexport default Notification;\n","import React from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\nimport PropTypes from \"prop-types\";\nconst options = [\"good\", \"neutral\", \"bad\"];\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  static propTypes = {\n    step: PropTypes.number.isRequired,\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.bad + this.state.neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (this.countTotalFeedback() === 0) {\n      return 0;\n    } else {\n      return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n    }\n  };\n\n  onLeaveFeedback = ({ target }) => {\n    let { name } = target;\n    this.setState((prevState, prevProps) => {\n      return {\n        [name]: prevState[name] + prevProps.step,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={this.state.good}\n              bad={this.state.bad}\n              neutral={this.state.neutral}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App step={1} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}